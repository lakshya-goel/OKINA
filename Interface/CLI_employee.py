
from os import system, name
from time import sleep
import mysql.connector

Employee = ""
#connecting to sql server
try:
    db = mysql.connector.connect(
    host = 'localhost',
    user = 'root',
    passwd = '24112003',
    database='okina')

except mysql.connector.Error as e:
    print("Error connecting to the database.")
    exit (1)

cur = db.cursor(buffered=True)
query_string = ""

def isEmpty(query):
    cur.execute(query)
    lt = [len(i) for i in cur]
    if(len(lt)==0):
        return 1
    return 0

def merchant(id):
    who = str(id)
    while(True):
        print("Please choose one of the following options:")
        gaps(2)
        query = "select * from product A, merchant_products B where A.product_ID = B.product_ID and B.merchant_ID = "+who
        print("Press 1 to view all your products")
        print("Press 2 to view the total profit generated by your products in past month")
        print("Press 3 to view the your best selling product")
        print("Press 4 to search your product by product id")
        print("Press 5 to update your product stock by product id")
        print()
        print("Anything else will exist")
        print()
        ans = exec_query(query,3) 
        prod_ids = ','.join(str(x[0]) for x in ans)
        qty_chk = exec_query("select product_ID,size,price,discount,rating from product where stock = 0 and product_ID in  ({})".format(prod_ids), 3)
        if(len(qty_chk) != 0 ):
            print(f'you have {len(qty_chk)} products out of stock, press 6 to view products out of stock')
            gaps(1)
        ch = int(input("Choice :"))
        if(ch == 1):
            exec_query(query,1)
            gaps(3)
        elif(ch == 2):
            query_string = "select sum(profit) from sales C, product A where C.date <= '2023-03-31 00:00:00' and C.date >= '2023-02-01 00:00:00' and A.product_ID = C.product_ID and A.product_ID in ({})".format(prod_ids)
            print("Total profit generated this past month (in lacs): ",((exec_query(query_string,-1))/100000))
        elif(ch == 3):
            query_string = "select A.profit,B.product_ID,size,price,discount,rating from product B, sales A where B.product_ID in (select product_ID from sales where  (product_ID, profit) in (select product_ID, max(profit) from sales where  product_ID in ({}) group by product_ID)) and A.product_ID = B.product_ID".format(prod_ids)
            print("Your best selling products are : ")
            print()
            exec_query(query_string,1)
        elif(ch == 4):
            prod_id = input("Enter the ID of your product")
            query_string = f"select A.* from product A, merchant_products B where B.merchant_ID = {who} and A.product_ID = {prod_id} and A.product_ID = B.product_ID"
            ill = exec_query(query_string,3)
            if(len(ill) == 0):
                print("no product found")
                continue
            for i in ill:
                print(i)
        elif(ch == 5):
            prod_id = input("Enter the ID of your product to update: ")
            query_string = f"select A.* from product A, merchant_products B where B.merchant_ID = {who} and A.product_ID = {prod_id} and A.product_ID = B.product_ID"
            ill = exec_query(query_string,3)
            if(len(ill) == 0):
                print("no product found")
                continue
            for i in ill:
                print(i)
                slash = int(input("Enter 1 for updating 0 to delay :"))
                if(slash == 1):
                    qutie = int(input("Enter new stock arrived : "))
                    if(qutie > 0):
                        exec_query("update product set stock = stock+{} where product_id = {} ".format(qutie,i[0]),2)
                    else:
                        print("invalid quantity")
                    gaps(2)
                    db.commit()
                else: continue 
        elif(ch == 6):
            for i in qty_chk:
                print(i)
                slash = int(input("Enter 1 for updating 0 to delay :"))
                if(slash == 1):
                    qutie = int(input("Enter new stock: "))
                    if(qutie > 0):
                        exec_query("update product set stock = {} where product_id = {} ".format(qutie,i[0]),2)
                    else:
                        print("invalid quantity")
                    gaps(2)
                    db.commit()
                else: continue 
                db.commit()
        else:
            return

def assister(id):
    who = str(id)
    while(True):
        print("Please choose one of the following options:")
        gaps(2)
        query = f"SELECT A.* FROM assistance A, assister_query B WHERE B.assister_id = {who} AND A.query_ID = B.query_ID AND A.status = 'pending'"
        ans =  exec_query(query, 3)
        print("Press 1 to view pending quries")
        print("Press 2 to search pending query")
        print("Press 3 to reopen a query")
        print()
        print("Anything else will exist")
        print() 
        ch= int(input("Enter your choice: "))
        if(ch == 1):
            for row in ans:
                print(f"Query ID: {row[0]}, Order ID:{row[1]}, User ID: {row[2]}, Status: {row[3]}")
                print()
                user_input = input("Enter 1 to mark as resolved or 0 to keep it pending: ")
                if user_input == '1':
                    update_query = f"UPDATE assistance SET status = 'resolved' WHERE query_ID = {row[0]}"
                    exec_query(update_query, 2)
                    gaps(2)
                else:
                    continue
                db.commit()
        elif(ch == 2):
            query_id = input("Enter the query ID: ")
            query = f"SELECT A.* FROM assistance A, assister_query B WHERE A.query_ID = {query_id} and A.query_ID = B.query_ID and B.assister_ID = {who} and A.status = 'pending'"
            try:
                result = (exec_query(query, 3))[0]
            except IndexError:
                print("Query not found")
                continue
            print("Query ID:", result[0])
            print("Order ID:", result[1])
            print("User ID:", result[2])
            print("Status:", result[3])
            query = f"SELECT email_ID FROM user WHERE user_ID = {result[2]}"
            emair = exec_query(query, -1)
            print("user Email:", emair)
            print()
            user_input = input("Enter 1 to mark as resolved or 0 to keep it pending: ")
            if user_input == '1':
                update_query = f"UPDATE assistance SET status = 'resolved' WHERE query_ID = {result[0]}"
                exec_query(update_query, 2)
                gaps(2)
            else:
                continue
            db.commit()
        elif(ch == 3):
            query_id = input("Enter the query ID: ")
            query = f"SELECT A.* FROM assistance A, assister_query B WHERE A.query_ID = {query_id} and A.query_ID = B.query_ID and A.status = 'resolved'"
            result = (exec_query(query, 3))[0]
            if result is None:
                print("Query not found")
                continue
            print("Query ID:", result[0])
            print("Order ID:", result[1])
            print("User ID:", result[2])
            print("Status:", result[3])
            query = f"SELECT email_ID FROM user WHERE user_ID = {result[1]}"
            emair = exec_query(query, -1)
            print("user Email:", emair)
            user_input = input("Enter 1 to mark as pending or 0 to keep it resolved: ")
            if user_input == '1':
                update_query = f"UPDATE assistance SET status = 'pending' WHERE query_ID = {result[0]}"
                exec_query(update_query, 2)
                gaps(2)
            else:
                continue
            db.commit()
        else:
            return

def delivery_exec(id):
    who = str(id)
    while True:
        print("Please choose one of the following options:")
        gaps(2)
        print("1. Check profile")
        print("2. Get delivery details")
        print()
        print("Anything else will exit")
        print()
        ch = int(input("Enter your choice: "))
        print()
        if ch == 1:
            query = f"SELECT * FROM delivery_exec WHERE exec_ID = {who}"
            result = exec_query(query, 3)
            if result:
                print("Name:", result[0][1])
                print("Contact:", result[0][2])
                print("Availability:", result[0][3])
                print("Rating:", result[0][4])
                gaps(2)
            else:
                print("No results found")
        
        elif ch == 2:
            query = f"SELECT delivery_ID, datetime FROM delivery_details WHERE exec_ID = {who}"
            result = exec_query(query, 3)
            if result:
                for row in result:
                    delivery_id = row[0]
                    delivery_time = row[1]
                    print("Delivery ID:", delivery_id)
                    print("Delivery Time:", delivery_time)
                    query = f"SELECT O.order_ID, U.contact, A.address FROM `orders` O, user_contact U, user_address A WHERE O.delivery_ID = {delivery_id} AND O.user_ID = U.user_ID and O.user_ID = A.user_ID LIMIT 1"
                    order_result = exec_query(query, 3)
                    if order_result:
                        order_id = order_result[0][0]
                        user_contact = order_result[0][1]
                        user_address = order_result[0][2]
                        print("Order ID:", order_id)
                        print("User Contact:", user_contact)
                        print("User Address:", user_address)
                    else:
                        print("No results found")
                    gaps(2)
            else:
                print("No results found")
        
        else:
            return


#helper minor functions
def chk_emply_pwd(curr,p):
    if(curr ==p):
        return True
    return False
def employee_usr_chk(s):
    try:
        curr = db.cursor()
        string = "select * from  %s where name = %s" %(Employee,'\''+ s + '\'',)
        curr.execute(string)
        return curr.fetchone()
    except:
        return False

def clear():
    if name == 'nt':
        _ = system('cls')

def gaps(i):
    for j in range(i):
        print()

def shift(i):
    for j in range(i):
        print(" ",end="")

def print_column_headers():
    field_names = [i[0] for i in cur.description]
    for i in field_names:
        print(i,end=" ")
    print()

def exec_query(s,flag):                             #flag signifies whether the column headers need to be printed
    
    try:
        cur.execute(s)
    except Exception as e:
        print('No result',e)
        return
    if(flag==1):
        if isEmpty(s):
            print('No result')
            return
        print('='*200)
        print('Query output: ')
        gaps(1)
        print_column_headers()
        l = 0
        cur.execute(s)
        for i in cur:
            l = len(i)
            break
        c=0
        cur.execute(s)
        for i in cur:
            if(c==10):
                gaps(2)
                ans = input("Do you wish to print all records? (y/n): ")
                if(ans=="n"):
                    break
                gaps(1)
            
            #printing each row in output
        
            print(c+1,".",str(i[0])[:20],end=" "*(17-len(str(i[0]))-len(str(c+1))))
            print('|',end=" ")
            for j in range(1,l-1):
                print(str(i[j])[:20],end=" "*(20-len(str(i[j])[:20])))
                print('|',end = " ")
            print(i[j+1])
            c+=1
        gaps(1)
        print('Total rows returned - ',c)
        print('='*200)
    elif(flag == 2):
        return
    elif (flag == 3):
        return cur.fetchall()
    else:
        for i in cur:
            return i[0]
            

#basic interface- start screen
while(True):
    print("************************************************************************************************************")
    gaps(3)
    shift(25)
    ch = int(input("Press 1 if exisiting employee\n                         Press 0 to register\n                         anything else to exit\n                         Choice: "))
    if(ch == 1):
        gaps(3)
        shift(30)
        print("You are a:")
        shift(30)
        print("1. Seller")
        shift(30)
        print("2. Delievery Exec")
        shift(30)
        print("3. User Assistance Officer")
        shift(30)
        who = int(input("Enter index :"))
        if(who == 1):
            Employee = "merchant"
        if(who == 2):
            Employee = "delivery_exec"
        if(who == 3):
            Employee = "assister"
        gaps(3)
        shift(30)
        id = input("Name: ")
        shift(30)
        gaps(1)
        exists = employee_usr_chk(id)
        if(exists):
            shift(30)
            pwd = input("Password: ")
            gaps(3)
            print("************************************************************************************************************")
            sleep(1)
            clear()
            if(chk_emply_pwd(exists[2],pwd)):
                if(who == 1):
                    merchant(exists[0])
                elif(who == 2):
                    delivery_exec(exists[0])
                elif(who == 3):
                    assister(exists[0])
                else:
                    print()
                    print("Enter Valid input")
                    print()
            else:
                #verification failed
                gaps(2)
                print("Incorret Password.")
                gaps(2)
                print("Press 1 to try again")
                print("Press 2 to exit")
                gaps(2)
                chu = int(input("Choice: "))
                if(chu==1):
                    clear()
                    continue
                elif(chu==2):
                    clear()
                    print("You have chosen to exit")
                    gaps(2)
                    exit()
                else:
                    gaps(2)
                    print("Unrecognized input.")
                    print("Exiting...")
                    gaps(2)
                    exit()
        else:
            #verification failed
            gaps(2)
            shift(30)
            print("No user found")
            gaps(2)
            shift(30)
            print("Press 1 to try again")
            shift(30)
            print("Press 2 to exit")
            gaps(2)
            shift(30)
            chu = int(input("Choice: "))
            if(chu==1):
                clear()
                continue
            elif(chu==2):
                clear()
                shift(30)
                print("You have chosen to exit")
                gaps(2)
                exit()
            else:
                gaps(2)
                shift(30)
                print("Unrecognized input.")
                print("Exiting...")
                gaps(2)
                exit()
    elif(ch == 0):
        gaps(3)
        shift(30)
        naamcheen = input("Enter your name: ")
        shift(30)
        mobail_nomber = input("Enter your contact: ")
        gaps(3)
        shift(30)
        print("You are applying for:")
        shift(30)
        print("1. Seller")
        shift(30)
        print("2. Delievery Exec")
        shift(30)
        print("3. User assister Officer")
        shift(30)
        who = int(input("Enter index :"))
        if(who == 1):
            Employee = "merchant"
        if(who == 2):
            Employee = "delivery_exec"
        if(who == 3):
            Employee = "assister"
        exec_query("insert into adhoc(name, contact, position) values('{}','{}','{}')".format(naamcheen,mobail_nomber,Employee),2)
        db.commit()
        shift(10)
        print("your details have been submitted, please wait for you application to be approved, you will be notified via message.")
    else:
        gaps(2)
        shift(30)
        print("Exiting...")
        gaps(2)
        exit()